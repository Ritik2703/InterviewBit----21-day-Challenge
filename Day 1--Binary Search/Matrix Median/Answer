#Hint -

We cannot use extra memory, so we canâ€™t actually store all elements in an array and sort the array.
But since, rows are sorted it must be of some use, right?

Note that in a row you can binary search to find how many elements are smaller than a value X in O(log M).
This is the base of our solution.

Say k = N*M/2. We need to find (k + 1)^th smallest element.
We can use binary search on answer. In O(N log M), we can count how many elements are smaller than X in the matrix.

So, we use binary search on interval [1, INT_MAX]. So, total complexity is O(30 * N log M).

Note:
This problem can be solve by using min-heap, but extra memory is not allowed.

#Sol-

int Solution::findMedian(vector<vector<int> > &A) {
    int min =INT_MAX,max = INT_MIN;
    int r = A.size(),c=A[0].size();
    for(int i=0;i<r;i++)
    {
        if(A[i][0]<min)
         min = A[i][0];
         if(A[i][c-1]>max)
         max = A[i][c-1];
    }
    int median = (1+r*c)/2;
    while(min<max)
    {
        int count=0;
        int mid = min+(max-min)/2;
        for(int i=0;i<r;i++)
        count+=upper_bound(A[i].begin(),A[i].end(),mid)-(A[i].begin());
        if(count<median)
        min = mid+1;
        else
        max = mid;
        
    }
    return min;
}
